# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
    push:
        branches: ['master']
    pull_request:
        branches: ['master']

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            # Install Flutter
            - name: Install Flutter
              uses: subosito/flutter-action@v2
              with:
                  channel: stable

            # Install dependencies
            - name: Install dependencies
              run: flutter pub get

            # Uncomment this step to verify the use of 'dart format' on each commit.
            # - name: Verify formatting
            #   run: dart format --output=none --set-exit-if-changed .

            # Consider passing '--fatal-infos' for slightly stricter analysis.
            # - name: Analyze project source
            #   run: dart analyze

            # Your project will need to have tests in test/ and a dependency on
            # package:test for this step to succeed. Note that Flutter projects will
            # want to change this to 'flutter test'.
            # - name: Run tests
            #   run: dart test

            # Build Flutter Web
            - name: Build Flutter Web
              run: flutter build web --no-tree-shake-icons

            # Build Docker image using Dockerfile.CI
            - name: Build Docker Image
              run: docker build -f Dockerfile.CI -t apevolo-flutter-web:latest .

            # Set up SSH
            - name: Set up SSH
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
                  chmod 600 ~/.ssh/id_rsa
                  echo "${{ secrets.KNOWN_HOSTS }}" > ~/.ssh/known_hosts

            # Deploy Docker Image to Server
            - name: Deploy Docker Image to Server
              env:
                  SERVER_USER: ${{ secrets.SERVER_USER }}
                  SERVER_HOST: ${{ secrets.SERVER_HOST }}
              run: |
                  docker save apevolo-flutter-web:latest | bzip2 | ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST 'bunzip2 | docker load && docker stop apevolo-flutter-web || true && docker rm apevolo-flutter-web || true && docker run -d --name apevolo-flutter-web -p 80:80 apevolo-flutter-web:latest'
